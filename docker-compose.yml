version: '3.5'
services:
  
  user-db:
    build: user-postgresql
    image: user_postgresql:1.0.0
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_USER}
    networks:
      - fitness_ntwrk

  product-db:
    build: product-postgresql
    image: product_postgresql:1.0.0
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_PRODUCT}
    networks:
      - fitness_ntwrk

  mail-db:
    build: mail-postgresql
    image: mail_postgresql:1.0.0
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_MAIL}
    networks:
      - fitness_ntwrk

  audit-db:
    build: audit-postgresql
    image: audit_postgresql:1.0.0
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_AUDIT}
    networks:
      - fitness_ntwrk

  report-db:
    build: report-postgresql
    image: report_postgresql:1.0.0
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_REPORT}
    networks:
      - fitness_ntwrk

  pgadmin:
    build: pgadmin
    image: fitness_pgadmin:1.0.0
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_USER}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "82:80"
    networks:
      - fitness_ntwrk

  user-service:
    build: user-service
    image: user-service:1.0.0
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL_USER}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ISSUER: ${JWT_ISSUER}
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      KAFKA_SERVERS: ${KAFKA_SERVERS}
    depends_on:
      - eureka-server
      - kafka-broker-1
      - kafka-broker-2
      - user-db
    networks:
      - fitness_ntwrk

  product-service:
    build: product-service
    image: product-service:1.0.0
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL_PRODUCT}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ISSUER: ${JWT_ISSUER}
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      KAFKA_SERVERS: ${KAFKA_SERVERS}
    depends_on:
      - eureka-server
      - kafka-broker-1
      - kafka-broker-2
      - product-db
    networks:
      - fitness_ntwrk

  mail-service:
    build: mail-service
    image: mail-service:1.0.0
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL_MAIL}
      MAIL_USER: ${MAIL_USER}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_CONFIRMATION_LINK: ${MAIL_CONFIRMATION_LINK}
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
    depends_on:
      - eureka-server
      - mail-db
    networks:
      - fitness_ntwrk

  audit-service:
    build: audit-service
    image: audit-service:1.0.0
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL_AUDIT}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ISSUER: ${JWT_ISSUER}
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      KAFKA_SERVERS: ${KAFKA_SERVERS}
    depends_on:
      - eureka-server
      - kafka-broker-1
      - kafka-broker-2
      - audit-db
    networks:
      - fitness_ntwrk

  report-service:
    build: report-service
    image: report-service:1.0.0
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL_REPORT}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ISSUER: ${JWT_ISSUER}
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      MINIO_SERVER_URL: ${MINIO_SERVER_URL_REPORT}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_EXCEL_BUCKET: ${MINIO_EXCEL_BUCKET}
      KAFKA_SERVERS: ${KAFKA_SERVERS}
    depends_on:
      - eureka-server
      - kafka-broker-1
      - kafka-broker-2
      - report-db
      - minio
    networks:
      - fitness_ntwrk

  eureka-server:
    build: eureka-server
    image: eureka-server:1.0.0
    ports:
      - "8761:8761"
    networks:
      - fitness_ntwrk

  minio:
    image: minio/minio:latest
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_SERVER_URL: ${MINIO_SERVER_URL}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL}
    volumes:
      - ./data:/data
    command: server /data --console-address :9001
    networks:
      - fitness_ntwrk

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - fitness_ntwrk
      
  kafka-broker-1:
    image: confluentinc/cp-enterprise-kafka:latest
    hostname: kafka-broker-1
    container_name: kafka-broker-1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker-1:9092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - fitness_ntwrk

  kafka-broker-2:
    image: confluentinc/cp-enterprise-kafka:latest
    hostname: kafka-broker-2
    container_name: kafka-broker-2
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-2:9093,PLAINTEXT_HOST://localhost:29093
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker-2:9093
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - fitness_ntwrk

  swagger-ui:
    build: swagger-ui
    image: fitness_swagger-ui:1.0.0
    ports:
      - "81:8080"
    networks:
      - fitness_ntwrk

  proxy:
    build: proxy
    image: fitness_proxy:1.0.0
    ports:
      - "80:80"
    networks:
      - fitness_ntwrk

networks:
    fitness_ntwrk:
      name: fitness_ntwrk